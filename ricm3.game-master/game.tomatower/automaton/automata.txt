MoverSquare(Un){
    * (Un): True ? Move(S) : (Deux)
    * (Deux) : True ? Move(E) : (Trois)
    * (Trois) : True ? Move(N) : (Quatre)
    * (Quatre) : True ? Move(O) : (Un)
}

MoverRandom(Init) {
    * (Init): True ? Move(O) / Move(E) / Move(S) / Move(N) : (Init)
}

MoverBottom(Init) {
    * (Init): True ? Move(S) : (Init)
}

Hiter(Init) {
    *(Init): 
     | Cell(N, T) ? Hit(N) : (Init)
     | True ? Jump : (Init)
}

HiterTower(Shoot) {
    *(Shoot) : 
    	| !GotPower ? Pop : (X)
    	| Closest(A,N) ? Hit(N) : (Shoot)
    	| Closest(A,S) ? Hit(S) : (Shoot)
    	| Closest(A,E) ? Hit(E) : (Shoot)
    	| Closest(A,O) ? Hit(O) : (Shoot)
    	| True ? Turn(F)	: (Shoot)
}

EvilTower(Shoot) {
    *(Shoot) : 
    	| !GotPower ? Pop : (X)
    	| Closest(T,N) ? Hit(N) : (Shoot)
    	| Closest(T,S) ? Hit(S) : (Shoot)
    	| Closest(T,E) ? Hit(E) : (Shoot)
    	| Closest(T,O) ? Hit(O) : (Shoot)
    	| True ? Turn(F)	: (Shoot)
}

CrazyTower(Crazy1){
	*(Crazy1): 
		| !GotPower ? Pop : (X)
		| True ? Hit(N) : (Crazy2)
	*(Crazy2): 
		| !GotPower ? Pop : (X)
		| True ? Hit(E) : (Crazy3)
	*(Crazy3):
		| !GotPower ? Pop : (X)
	 	| True ? Hit(S) : (Crazy4)
	*(Crazy4): 
		| !GotPower ? Pop : (X)
		| True ? Hit(O) : (Crazy1)
}


FollowTheRightWall(Bump){

	* (Bump):
		| Cell(S,D)? Pop	: (X)
		| Cell(N,D)? Pop	: (X)
		| Cell(O,D)? Pop	: (X)
		| Cell(E,D)? Pop	: (X)
		| Cell(S,T)? Hit(S)	: (Bump)
		| Cell(N,T)? Hit(N)	: (Bump)
		| Cell(O,T)? Hit(O)	: (Bump)
		| Cell(E,T)? Hit(E)	: (Bump)
		| Cell(F,V) ? Move(F)	:(Bump)
		| Cell(F,A) ? Move(F)	:(Bump)
		| True ? Turn(L)	:(FollowWalls)

	* (FollowWalls):
		| Cell(S,D)? Pop	: (X)
		| Cell(N,D)? Pop	: (X)
		| Cell(O,D)? Pop	: (X)
		| Cell(E,D)? Pop	: (X)
		| Cell(S,T)? Hit(S)	: (FollowWalls)
		| Cell(N,T)? Hit(N)	: (FollowWalls)
		| Cell(O,T)? Hit(O)	: (FollowWalls)
		| Cell(E,T)? Hit(E)	: (FollowWalls)
		| Cell(R,V) ? Move(R)	:(FollowWalls)
		| Cell(R,A) ? Move(R)	:(FollowWalls)
		| Cell(F,V) ? Move(F)	:(FollowWalls)
		| Cell(F,A) ? Move(F)	:(FollowWalls)
		| Cell(L,V) ? Move(L)	:(FollowWalls)
		| Cell(L,A) ? Move(L)	:(FollowWalls)
		| True ? Move(B)	:(FollowWalls)

}

FollowTheLeftWall(Bump){

	* (Bump):
		| Cell(S,D)? Pop	: (X)
		| Cell(N,D)? Pop	: (X)
		| Cell(O,D)? Pop	: (X)
		| Cell(E,D)? Pop	: (X)
		| Cell(S,T)? Hit(S)	: (Bump)
		| Cell(N,T)? Hit(N)	: (Bump)
		| Cell(O,T)? Hit(O)	: (Bump)
		| Cell(E,T)? Hit(E)	: (Bump)
		| Cell(F,V) ? Move(F)	:(Bump)
		| Cell(F,A) ? Move(F)	:(Bump)
		| True ? Turn(R)	:(FollowWalls)

	* (FollowWalls):
		| Cell(S,D)? Pop	: (X)
		| Cell(N,D)? Pop	: (X)
		| Cell(O,D)? Pop	: (X)
		| Cell(E,D)? Pop	: (X)
		| Cell(S,T)? Hit(S)	: (FollowWalls)
		| Cell(N,T)? Hit(N)	: (FollowWalls)
		| Cell(O,T)? Hit(O)	: (FollowWalls)
		| Cell(E,T)? Hit(E)	: (FollowWalls)
		| Cell(L,V) ? Move(L)	:(FollowWalls)
		| Cell(L,A) ? Move(L)	:(FollowWalls)
		| Cell(F,V) ? Move(F)	:(FollowWalls)
		| Cell(F,A) ? Move(F)	:(FollowWalls)
		| Cell(R,V) ? Move(R)	:(FollowWalls)
		| Cell(R,A) ? Move(R)	:(FollowWalls)
		| True ? Move(B)	:(FollowWalls) 

}

Rusher(Rush){

	* (Rush):
		| Cell(N,D) ? Pop			:(X)
		| Cell(S,D) ? Pop			:(X)
		| Cell(E,D) ? Pop			:(X)
		| Cell(O,D) ? Pop			:(X)
		| Closest(D,N) & Cell(N,V) ? Turn(N)	:(Turner)
		| Closest(D,N) & Cell(N,A) ? Turn(N)	:(Turner)
		| Closest(D,S) & Cell(S,V) ? Turn(S)	:(Turner)
		| Closest(D,S) & Cell(S,A) ? Turn(S)	:(Turner)
		| Closest(D,E) & Cell(E,V) ? Turn(E)	:(Turner)
		| Closest(D,E) & Cell(E,A) ? Turn(E)	:(Turner)
		| Closest(D,O) & Cell(O,V) ? Turn(O)	:(Turner)
		| Closest(D,O) & Cell(O,A) ? Turn(O)	:(Turner)
		| True ? Turn(R) / Turn(L)		:(Pathfinding)

	* (Turner): True ? Move(F)	:(Rush)

	* (Pathfinding):
		| Cell(F,V) ? Turn(F)	:(Turner)
		| Cell(F,A) ? Turn(F)	:(Turner)
		| Cell(B,V) ? Turn(B)	:(Turner)
		| Cell(B,A) ? Turn(B)	:(Turner)
		| True ? Turn(R)	:(Blocked)

	* (Blocked):
		| Cell(F,V) ? Move(F)	:(Panic)
		| True ? Turn(R)	:(Blocked)

	* (Panic_1): True ? Move(F)	:(Panic_2)

	* (Panic_2):
		| Cell(F,V) ? Move(F)	:(Panic_3)
		| True ? Jump(F)	:(Panic_3)

	* (Panic_3): True ? Turn(R) / Turn(L)	:(Panic_4)

	* (Panic_4):
		| Cell(F,V) ? Move(F)	:(Turner)
		| True ? Jump(F)	:(Rush)
	}

Agressiv(Chase) {
	* (Chase):
		| Cell(S,T)? Hit(S)	: (Chase)
		| Cell(N,T)? Hit(N)	: (Chase)
		| Cell(O,T)? Hit(O)	: (Chase)
		| Cell(E,T)? Hit(E)	: (Chase)
		| Closest(T,N) & Cell(N,V) ? Move(N)	:(Chase)
		| Closest(T,N) & Cell(N,A) ? Move(N)	:(Chase)
		| Closest(T,N) ? Move(E) / Move(O)	:(Chase)
		| Closest(T,S) & Cell(S,V) ? Move(S)	:(Chase)
		| Closest(T,S) & Cell(S,A) ? Move(S)	:(Chase)
		| Closest(T,S) ? Move(E) / Move(O)	:(Chase)
		| Closest(T,E) & Cell(E,V) ? Move(E)	:(Chase)
		| Closest(T,E) & Cell(E,A) ? Move(E)	:(Chase)
		| Closest(T,E) ? Move(N) / Move(S)	:(Chase)
		| Closest(T,O) & Cell(O,V) ? Move(O)	:(Chase)
		| Closest(T,O) & Cell(O,A) ? Move(O)	:(Chase)
		| Closest(T,O) ? Move(S) / Move(N)	:(Chase)
		| True ? Pop : (X)
		
}

Shoper(Bump){

	* (Bump):
		| Cell(F,V) ? Move(F)	:(Bump)
		| Cell(F,A) ? Move(F)	:(Bump)
		| True ? Turn(R)	:(FollowWalls)

	* (FollowWalls):
		| Cell(L,G) ? Move(L)	:(Enter)
		| Cell(L,V) ? Move(L)	:(FollowWalls)
		| Cell(L,A) ? Move(L)	:(FollowWalls)
		| Cell(F,G) ? Move(F)	:(Enter)
		| Cell(F,V) ? Move(F)	:(FollowWalls)
		| Cell(F,A) ? Move(F)	:(FollowWalls)
		| Cell(R,G) ? Move(R)	:(Enter)
		| Cell(R,V) ? Move(R)	:(FollowWalls)
		| Cell(R,A) ? Move(R)	:(FollowWalls)
		| True ? Move(B)	:(FollowWalls)
		
	* (Enter): True ? Move(N)	:(Shop)
	
	* (Shop):
		| Cell(R,P) ? Turn(R)	:(Purchase1)
		| Cell(R,V) ? Move(R)	:(Shop)
		| Cell(R,A) ? Move(R)	:(Shop)
		| Cell(F,P) ? Turn(F)	:(Purchase1)
		| Cell(F,V) ? Move(F)	:(Shop)
		| Cell(F,A) ? Move(F)	:(Shop)
		| Cell(L,P) ? Turn(L)	:(Purchase1)
		| Cell(L,V) ? Move(L)	:(Shop)
		| Cell(L,A) ? Move(L)	:(Shop)
		| True ? Move(B)	:(Shop)

	* (Purchase1) : True ? Pop	:(Purchase2)
	
	* (Purchase2) : True ? Pop	:(Purchase3)
	
	* (Purchase3) : True ? Pop	:(MischiefManaged)
	
	* (MischiefManaged) : True ? Kamikaze :(X)
}


Perso(Init) {
    *(Init):
     | Key(FU) ? Move(N) : (Init)
     | Key(FD) ? Move(S) : (Init)
     | Key(FR) ? Move(E) : (Init)
     | Key(FL) ? Move(O) : (Init)
     | Key(SPACE) ? Hit : (Init)
     | Key(a) ? Pick : (Init)
     | Key(w) ? Wizz : (Init)
     | Key(z) ? Store : (Init)
     | Key(q) ? Throw : (Init)
     | Key(s) ? Get : (Init)
     | Key(p) ? Pop : (Init)
}

Explorer(Explore){

* (Explore):
  | Cell(F,V) ? Move    :(Explore)
  | Cell(R,V) ? Turn(R) :(Explore)
  | Cell(L,V) ? Turn(L) :(Explore)
  | True ? Turn(B) :(Exploreb)

* (Exploreb):
    | Cell(F,V) ? Move    :(Exploreb)
    | Cell(L,V) ? Turn(L) :(Exploreb)
    | Cell(R,V) ? Turn(R) :(Exploreb)
    | True ? Turn(B) :(Explore)
}

ExplorerBIS(Explore_R){

* (Explore_R):
  | Cell(F,V) ? Move    :(Explore_R)
  | Cell(R,V) ? Turn(R) :(Explore_R)
  | Cell(L,V) ? Turn(L) :(Explore_R)
  | True ? Turn(B) :(Explore_L)

* (Explore_L):
    | Cell(F,V) ? Move    :(Explore_L)
    | Cell(L,V) ? Turn(L) :(Explore_L)
    | Cell(R,V) ? Turn(R) :(Explore_L)
    | True ? Turn(B) :(Explore_R)
}

FollowTheWallsTest(Bump){

	* (Bump):
		| Cell(F,V) ? Move(F)	:(Bump)
		| True ? Turn(L)	:(FollowWalls)

	* (FollowWalls):
		| Cell(R,V) ? Turn(R)	:(Step)
		| Cell(F,V) ? Move(F)	:(FollowWalls)
		| Cell(L,V) ? Turn(L)	:(_)
		| True ? Turn(B)	:(Step)

	* (Step): True ? Move(F)	:(FollowWalls)
	}

Turner(Turn_0){
  * (Turn_0): True ? Turn(R) :(Turn_1)
  * (Turn_1): True ? Turn(R) :(Turn_2)
  * (Turn_2): True ? Turn(R) :(Turn_3)
  * (Turn_3): True ? Turn(R) :(Turn_4)
  * (Turn_4): True ? Get :(X)
}

Atest(Init) {
    * (Init) : True ? Move(E) : (Init)
}






TestCondition(Un) {
 *(Un) : (True & !Cell(N, V) & True & !Cell(S, V) & True &  !Cell(E, V) & True & !Cell(O, V)) ? Kamikaze : (Un)

}


TowerRed(Init){
* (Init) : True ? Hit(E) : (Init)
}

TowerBlue(Init){
* (Init) : True ? Hit(O) : (Init)
}

TowerYellow(Init){
* (Init) : True ? Hit(S) : (Init)
}

TowerPurple(Init){
* (Init) : Cell(N, A) ? Wizz : (Init)
}

SuperHero(Explore){

* (Explore):
  | Cell(F,P) ? Pick    :(Happy)
  | Cell(F,V) ? Move(F) :(Run)
  | Cell(F,J) ? Jump    :(Explore)
  | True ? Turn(L)      :(Explore)

* (Run):
  | Cell(F,V) ? Move(F) :(Explore)
  | Cell(F,E) / Cell(B,E) / Cell(L,E) / Cell(R,E) ? Wizz :(Escape)
  | True ? Pop :(Explore)

* (Escape):
  | Cell(F,E) & Cell(B,V) ? Move(B) :(Escape)
  | Cell(B,E) & Cell(F,V) ? Move(F) :(Escape)
  | Cell(R,E) & Cell(L,V) ? Move(L) :(Escape)
  | Cell(L,E) & Cell(R,V) ? Move(R) :(Escape)
  | Cell(F,E) & !Cell(B,V) ? Hit :(Fight)
  | True ? Jump : (Explore)

* (Fight):
  | Cell(F,E) & Cell(L,E) & !(Cell(R,V) / Cell(B,V)) ? Hit :(Angry)
  | Cell(F,E) & Cell(R,E) & !(Cell(L,V) / Cell(B,V)) ? Hit :(Angry)
  | Cell(F,E) & Cell(B,E) & !(Cell(L,V) / Cell(R,V)) ? Hit :(Angry)
  | Cell(L,E) & Cell(R,E) & !(Cell(F,V) / Cell(B,V)) ? Turn(R) :(Angry)
  | True ? Pop :(Escape)

* (Angry):
  | GotPower ? Hit          :(Angry_11)
  | !GotPower ? Protect :(Angry_11)

* (Angry_11): True ? Turn(B) :(Angry_12)

* (Angry_12):
  | GotPower ? Hit : (Angry_13)
  | !GotPower ? Protect :(Angry_13)

* (Angry_13): True ? Turn(R) :(Angry_14)
* (Angry_14):
  | GotPower ? Hit : (Angry_15)
  | !GotPower ? Protect : (Angry_15)

* (Angry_16): True ? Turn(B) :(Angry_17)
* (Angry_17):
  | GotPower ? Hit : (Angry_15)
  | !GotPower ? Protect :(Angry_18)

* (Angry_18): True ? Turn(R) :(Rest)

* (Rest):
  | Cell(F,V) & Cell(B,V) & Cell(L,V) & Cell(R,V) ? Power : (Rest)
  | True ? Power :(Run)

* (Happy):
| Cell(F,P) ? Pick :(Happy_2)
| Cell(B,P) ? Turn(B) :(Happy)
| Cell(L,P) ? Turn(L) :(Happy)
| Cell(R,P) ? Turn(R) :(Happy)
| True ? Turn(A) :(Explore)

*(Happy): True ? Store :(Crazy)

* (Crazy)  : True ? Get     :(Crazy_1)
* (Crazy_1): True ? Get     :(Crazy_2)
* (Crazy_2): True ? Turn(B) :(Crazy_3)
* (Crazy_3): True ? Throw   :(Think)

* (Think):
  | Cell(F,J) ? Jump    :(Build)
  | Cell(B,J) ? Turn(B) :(Think)
  | Cell(L,J) ? Turn(L) :(Think)
  | Cell(R,J) ? Turn(R) :(Think)

* (Build):
  | GotStuff ? Get : (Build_1)
  | True ? Wizz :(Explore)

* (Build_1): True ? Throw :(Build)
}


