MoverSquare(Un){
    * (Un): True ? Move(S) : (Deux)
    * (Deux) : True ? Move(E) : (Trois)
    * (Trois) : True ? Move(N) : (Quatre)
    * (Quatre) : True ? Move(O) : (Un)
}

MoverRandom(Init) {

    * (Init): True ? Move(O) / Move(E) / Move(S) / Move(N) : (Init)
}

HiterTower(Shoot) {
    *(Shoot) : 
    	| !GotPower ? Pop : (X)
    	| Closest(A,N) ? Hit(N) : (Shoot)
    	| Closest(A,S) ? Hit(S) : (Shoot)
    	| Closest(A,E) ? Hit(E) : (Shoot)
    	| Closest(A,O) ? Hit(O) : (Shoot)
    	| True ? Turn(F)	: (Shoot)
}

EvilTower(Shoot) {
    *(Shoot) : 
    	| !GotPower ? Pop : (X)
    	| Closest(T,N) ? Hit(N) : (Shoot)
    	| Closest(T,S) ? Hit(S) : (Shoot)
    	| Closest(T,E) ? Hit(E) : (Shoot)
    	| Closest(T,O) ? Hit(O) : (Shoot)
    	| True ? Turn(F)	: (Shoot)
}

CrazyTower(Crazy1){
	*(Crazy1): 
		| !GotPower ? Pop : (X)
		| True ? Hit(N) : (Crazy2)
	*(Crazy2): 
		| !GotPower ? Pop : (X)
		| True ? Hit(E) : (Crazy3)
	*(Crazy3):
		| !GotPower ? Pop : (X)
	 	| True ? Hit(S) : (Crazy4)
	*(Crazy4): 
		| !GotPower ? Pop : (X)
		| True ? Hit(O) : (Crazy1)
}

SafeTower(Shoot){
	*(Shoot) : 
		| Cell(S,A)? Wizz	: (Shoot)
		| Cell(N,A)? Wizz	: (Shoot)
		| Cell(O,A)? Wizz	: (Shoot)
		| Cell(E,A)? Wizz	: (Shoot)
    	| Closest(A,N) ? Hit(N) : (Shoot)
    	| Closest(A,S) ? Hit(S) : (Shoot)
    	| Closest(A,E) ? Hit(E) : (Shoot)
    	| Closest(A,O) ? Hit(O) : (Shoot)
    	| True ? Turn(F)	: (Shoot)
}


FollowTheRightWall(Bump){

	* (Bump):
		| Cell(S,D)? Pop	: (X)
		| Cell(N,D)? Pop	: (X)
		| Cell(O,D)? Pop	: (X)
		| Cell(E,D)? Pop	: (X)
		| Cell(S,T)? Hit(S)	: (Bump)
		| Cell(N,T)? Hit(N)	: (Bump)
		| Cell(O,T)? Hit(O)	: (Bump)
		| Cell(E,T)? Hit(E)	: (Bump)
		| Cell(F,V) ? Move(F)	:(Bump)
		| Cell(F,A) ? Move(F)	:(Bump)
		| True ? Turn(L)	:(FollowWalls)

	* (FollowWalls):
		| Cell(S,D)? Pop	: (X)
		| Cell(N,D)? Pop	: (X)
		| Cell(O,D)? Pop	: (X)
		| Cell(E,D)? Pop	: (X)
		| Cell(S,T)? Hit(S)	: (FollowWalls)
		| Cell(N,T)? Hit(N)	: (FollowWalls)
		| Cell(O,T)? Hit(O)	: (FollowWalls)
		| Cell(E,T)? Hit(E)	: (FollowWalls)
		| Cell(R,V) ? Move(R)	:(FollowWalls)
		| Cell(R,A) ? Move(R)	:(FollowWalls)
		| Cell(F,V) ? Move(F)	:(FollowWalls)
		| Cell(F,A) ? Move(F)	:(FollowWalls)
		| Cell(L,V) ? Move(L)	:(FollowWalls)
		| Cell(L,A) ? Move(L)	:(FollowWalls)
		| True ? Move(B)	:(FollowWalls)

}

FollowTheLeftWall(Bump){

	* (Bump):
		| Cell(S,D)? Pop	: (X)
		| Cell(N,D)? Pop	: (X)
		| Cell(O,D)? Pop	: (X)
		| Cell(E,D)? Pop	: (X)
		| Cell(S,T)? Hit(S)	: (Bump)
		| Cell(N,T)? Hit(N)	: (Bump)
		| Cell(O,T)? Hit(O)	: (Bump)
		| Cell(E,T)? Hit(E)	: (Bump)
		| Cell(F,V) ? Move(F)	:(Bump)
		| Cell(F,A) ? Move(F)	:(Bump)
		| True ? Turn(R)	:(FollowWalls)

	* (FollowWalls):
		| Cell(S,D)? Pop	: (X)
		| Cell(N,D)? Pop	: (X)
		| Cell(O,D)? Pop	: (X)
		| Cell(E,D)? Pop	: (X)
		| Cell(S,T)? Hit(S)	: (FollowWalls)
		| Cell(N,T)? Hit(N)	: (FollowWalls)
		| Cell(O,T)? Hit(O)	: (FollowWalls)
		| Cell(E,T)? Hit(E)	: (FollowWalls)
		| Cell(L,V) ? Move(L)	:(FollowWalls)
		| Cell(L,A) ? Move(L)	:(FollowWalls)
		| Cell(F,V) ? Move(F)	:(FollowWalls)
		| Cell(F,A) ? Move(F)	:(FollowWalls)
		| Cell(R,V) ? Move(R)	:(FollowWalls)
		| Cell(R,A) ? Move(R)	:(FollowWalls)
		| True ? Move(B)	:(FollowWalls) 

}

Rusher(Rush){

	* (Rush):
		| Cell(N,D) ? Pop			:(X)
		| Cell(S,D) ? Pop			:(X)
		| Cell(E,D) ? Pop			:(X)
		| Cell(O,D) ? Pop			:(X)
		| Closest(D,N) & Cell(N,V) ? Turn(N)	:(Turner)
		| Closest(D,N) & Cell(N,A) ? Turn(N)	:(Turner)
		| Closest(D,S) & Cell(S,V) ? Turn(S)	:(Turner)
		| Closest(D,S) & Cell(S,A) ? Turn(S)	:(Turner)
		| Closest(D,E) & Cell(E,V) ? Turn(E)	:(Turner)
		| Closest(D,E) & Cell(E,A) ? Turn(E)	:(Turner)
		| Closest(D,O) & Cell(O,V) ? Turn(O)	:(Turner)
		| Closest(D,O) & Cell(O,A) ? Turn(O)	:(Turner)
		| True ? Turn(R) / Turn(L)		:(Pathfinding)

	* (Turner): True ? Move(F)	:(Rush)

	* (Pathfinding):
		| Cell(F,V) ? Turn(F)	:(Turner)
		| Cell(F,A) ? Turn(F)	:(Turner)
		| Cell(B,V) ? Turn(B)	:(Turner)
		| Cell(B,A) ? Turn(B)	:(Turner)
		| True ? Turn(R)	:(Blocked)

	* (Blocked):
		| Cell(F,V) ? Move(F)	:(Panic_1)
		| True ? Turn(R)	:(Blocked)

	* (Panic_1): True ? Move(F)	:(Panic_2)

	* (Panic_2):
		| Cell(F,V) ? Move(F)	:(Panic_3)
		| True ? Jump(F)	:(Panic_3)

	* (Panic_3): True ? Turn(R) / Turn(L)	:(Panic_4)

	* (Panic_4):
		| Cell(F,V) ? Move(F)	:(Turner)
		| True ? Jump(F)	:(Rush)
	}

Agressiv(Chase) {
	* (Chase):
		| Cell(S,T)? Hit(S)	: (Chase)
		| Cell(N,T)? Hit(N)	: (Chase)
		| Cell(O,T)? Hit(O)	: (Chase)
		| Cell(E,T)? Hit(E)	: (Chase)
		| Closest(T,N) & Cell(N,V) ? Move(N)	:(Chase)
		| Closest(T,N) & Cell(N,A) ? Move(N)	:(Chase)
		| Closest(T,N) ? Move(E) / Move(O)	:(Chase)
		| Closest(T,S) & Cell(S,V) ? Move(S)	:(Chase)
		| Closest(T,S) & Cell(S,A) ? Move(S)	:(Chase)
		| Closest(T,S) ? Move(E) / Move(O)	:(Chase)
		| Closest(T,E) & Cell(E,V) ? Move(E)	:(Chase)
		| Closest(T,E) & Cell(E,A) ? Move(E)	:(Chase)
		| Closest(T,E) ? Move(N) / Move(S)	:(Chase)
		| Closest(T,O) & Cell(O,V) ? Move(O)	:(Chase)
		| Closest(T,O) & Cell(O,A) ? Move(O)	:(Chase)
		| Closest(T,O) ? Move(S) / Move(N)	:(Chase)
		| True ? Pop : (X)
		
}

Rush(Chase) {
	* (Chase):
		| Cell(N,D) ? Pop			:(X)
		| Cell(S,D) ? Pop			:(X)
		| Cell(E,D) ? Pop			:(X)
		| Cell(O,D) ? Pop			:(X)
		| Closest(D,N) & Cell(N,V) ? Move(N)	:(Chase)
		| Closest(D,N) & Cell(N,A) ? Move(N)	:(Chase)
		| Closest(D,N) ? Move(E) / Move(O)	:(Chase)
		| Closest(D,S) & Cell(S,V) ? Move(S)	:(Chase)
		| Closest(D,S) & Cell(S,A) ? Move(S)	:(Chase)
		| Closest(D,S) ? Move(E) / Move(O)	:(Chase)
		| Closest(D,E) & Cell(E,V) ? Move(E)	:(Chase)
		| Closest(D,E) & Cell(E,A) ? Move(E)	:(Chase)
		| Closest(D,E) ? Move(N) / Move(S)	:(Chase)
		| Closest(D,O) & Cell(O,V) ? Move(O)	:(Chase)
		| Closest(D,O) & Cell(O,A) ? Move(O)	:(Chase)
		| True ? Move(S) / Move(N) : (Chase)
		
}

Shoper(Bump){

	* (Bump):
		| Cell(F,V) ? Move(F)	:(Bump)
		| Cell(F,A) ? Move(F)	:(Bump)
		| True ? Turn(R)	:(FollowWalls)

	* (FollowWalls):
		| Cell(L,G) ? Move(L)	:(Enter)
		| Cell(L,V) ? Move(L)	:(FollowWalls)
		| Cell(L,A) ? Move(L)	:(FollowWalls)
		| Cell(F,G) ? Move(F)	:(Enter)
		| Cell(F,V) ? Move(F)	:(FollowWalls)
		| Cell(F,A) ? Move(F)	:(FollowWalls)
		| Cell(R,G) ? Move(R)	:(Enter)
		| Cell(R,V) ? Move(R)	:(FollowWalls)
		| Cell(R,A) ? Move(R)	:(FollowWalls)
		| True ? Move(B)	:(FollowWalls)
		
	* (Enter): True ? Move(N)	:(Shop)
	
	* (Shop):
		| Cell(R,P) ? Turn(R)	:(Purchase1)
		| Cell(R,V) ? Move(R)	:(Shop)
		| Cell(R,A) ? Move(R)	:(Shop)
		| Cell(F,P) ? Turn(F)	:(Purchase1)
		| Cell(F,V) ? Move(F)	:(Shop)
		| Cell(F,A) ? Move(F)	:(Shop)
		| Cell(L,P) ? Turn(L)	:(Purchase1)
		| Cell(L,V) ? Move(L)	:(Shop)
		| Cell(L,A) ? Move(L)	:(Shop)
		| True ? Move(B)	:(Shop)

	* (Purchase1) : True ? Pop	:(Purchase2)
	
	* (Purchase2) : True ? Pop	:(Purchase3)
	
	* (Purchase3) : True ? Pop	:(MischiefManaged)
	
	* (MischiefManaged) : True ? Kamikaze :(X)
}


Perso(Init) {
    *(Init):
     | Key(FU) ? Move(N) : (Init)
     | Key(FD) ? Move(S) : (Init)
     | Key(FR) ? Move(E) : (Init)
     | Key(FL) ? Move(O) : (Init)
     | Key(SPACE) ? Hit : (Init)
     | Key(a) ? Pick : (Init)
     | Key(w) ? Wizz : (Init)
     | Key(z) ? Store : (Init)
     | Key(q) ? Throw : (Init)
     | Key(s) ? Get : (Init)
     | Key(p) ? Pop : (Init)
}

